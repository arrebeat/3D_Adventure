//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/_Scripts/Input/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""Astronaut"",
            ""id"": ""e9dce222-8309-4500-bb05-79d381e18344"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""1c3a82bb-8263-4a67-b44c-6a5b1773d718"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""a5f80f1d-535d-4083-b792-70c8fcc93c4f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Shoot"",
                    ""type"": ""Button"",
                    ""id"": ""e09f778b-2e56-43fc-a14b-46437bb012cf"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Gun01"",
                    ""type"": ""Button"",
                    ""id"": ""5c08efe6-1d61-4acb-b0cc-f33c207b3a1e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Gun02"",
                    ""type"": ""Button"",
                    ""id"": ""8c249b22-6f11-4e51-965d-24b5e88dd37e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Recover"",
                    ""type"": ""Button"",
                    ""id"": ""9bf71450-bd54-442c-9e56-f895c18bc97e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Letters"",
                    ""id"": ""5a4009e3-9b48-4cb4-b729-3595f9dca31c"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Up"",
                    ""id"": ""8bd08782-cb7c-49b5-8420-229b4753e31b"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Down"",
                    ""id"": ""88aa4f5a-c2be-4c19-a62a-7759ba293ef4"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Left"",
                    ""id"": ""ccd66836-7f37-48e4-9406-6dedf118a822"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Right"",
                    ""id"": ""712afa5c-4d02-4a46-a642-9f65b8a8c919"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""309b82bb-3e0b-46cb-a745-65c76f39a61a"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": ""StickDeadzone,NormalizeVector2"",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cc42c95a-28bf-4b20-98fe-068fe08d557b"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5e22ad15-dab3-4d9f-9d95-21810d8a692e"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""71c4f995-8c7f-464f-a80b-6ff9b497d9f6"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""66962523-4ae4-439c-97c7-f0a64d9b484c"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0deb8ebe-714a-48d6-863c-d673e13700e6"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Gun01"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a83f1773-a74d-4d5d-97e6-d1ca40527498"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Gun02"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""847a9f5b-a03f-46d4-8b00-b0e15b5396ff"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Recover"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard"",
            ""bindingGroup"": ""Keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Astronaut
        m_Astronaut = asset.FindActionMap("Astronaut", throwIfNotFound: true);
        m_Astronaut_Move = m_Astronaut.FindAction("Move", throwIfNotFound: true);
        m_Astronaut_Jump = m_Astronaut.FindAction("Jump", throwIfNotFound: true);
        m_Astronaut_Shoot = m_Astronaut.FindAction("Shoot", throwIfNotFound: true);
        m_Astronaut_Gun01 = m_Astronaut.FindAction("Gun01", throwIfNotFound: true);
        m_Astronaut_Gun02 = m_Astronaut.FindAction("Gun02", throwIfNotFound: true);
        m_Astronaut_Recover = m_Astronaut.FindAction("Recover", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Astronaut
    private readonly InputActionMap m_Astronaut;
    private List<IAstronautActions> m_AstronautActionsCallbackInterfaces = new List<IAstronautActions>();
    private readonly InputAction m_Astronaut_Move;
    private readonly InputAction m_Astronaut_Jump;
    private readonly InputAction m_Astronaut_Shoot;
    private readonly InputAction m_Astronaut_Gun01;
    private readonly InputAction m_Astronaut_Gun02;
    private readonly InputAction m_Astronaut_Recover;
    public struct AstronautActions
    {
        private @PlayerControls m_Wrapper;
        public AstronautActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Astronaut_Move;
        public InputAction @Jump => m_Wrapper.m_Astronaut_Jump;
        public InputAction @Shoot => m_Wrapper.m_Astronaut_Shoot;
        public InputAction @Gun01 => m_Wrapper.m_Astronaut_Gun01;
        public InputAction @Gun02 => m_Wrapper.m_Astronaut_Gun02;
        public InputAction @Recover => m_Wrapper.m_Astronaut_Recover;
        public InputActionMap Get() { return m_Wrapper.m_Astronaut; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(AstronautActions set) { return set.Get(); }
        public void AddCallbacks(IAstronautActions instance)
        {
            if (instance == null || m_Wrapper.m_AstronautActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_AstronautActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @Shoot.started += instance.OnShoot;
            @Shoot.performed += instance.OnShoot;
            @Shoot.canceled += instance.OnShoot;
            @Gun01.started += instance.OnGun01;
            @Gun01.performed += instance.OnGun01;
            @Gun01.canceled += instance.OnGun01;
            @Gun02.started += instance.OnGun02;
            @Gun02.performed += instance.OnGun02;
            @Gun02.canceled += instance.OnGun02;
            @Recover.started += instance.OnRecover;
            @Recover.performed += instance.OnRecover;
            @Recover.canceled += instance.OnRecover;
        }

        private void UnregisterCallbacks(IAstronautActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @Shoot.started -= instance.OnShoot;
            @Shoot.performed -= instance.OnShoot;
            @Shoot.canceled -= instance.OnShoot;
            @Gun01.started -= instance.OnGun01;
            @Gun01.performed -= instance.OnGun01;
            @Gun01.canceled -= instance.OnGun01;
            @Gun02.started -= instance.OnGun02;
            @Gun02.performed -= instance.OnGun02;
            @Gun02.canceled -= instance.OnGun02;
            @Recover.started -= instance.OnRecover;
            @Recover.performed -= instance.OnRecover;
            @Recover.canceled -= instance.OnRecover;
        }

        public void RemoveCallbacks(IAstronautActions instance)
        {
            if (m_Wrapper.m_AstronautActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IAstronautActions instance)
        {
            foreach (var item in m_Wrapper.m_AstronautActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_AstronautActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public AstronautActions @Astronaut => new AstronautActions(this);
    private int m_KeyboardSchemeIndex = -1;
    public InputControlScheme KeyboardScheme
    {
        get
        {
            if (m_KeyboardSchemeIndex == -1) m_KeyboardSchemeIndex = asset.FindControlSchemeIndex("Keyboard");
            return asset.controlSchemes[m_KeyboardSchemeIndex];
        }
    }
    private int m_GamepadSchemeIndex = -1;
    public InputControlScheme GamepadScheme
    {
        get
        {
            if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
            return asset.controlSchemes[m_GamepadSchemeIndex];
        }
    }
    public interface IAstronautActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnShoot(InputAction.CallbackContext context);
        void OnGun01(InputAction.CallbackContext context);
        void OnGun02(InputAction.CallbackContext context);
        void OnRecover(InputAction.CallbackContext context);
    }
}
